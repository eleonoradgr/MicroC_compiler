# 1 "src/scanner.mll"
 
    open Parser
    open Printf

    (* Put here your auxiliary definitions *)
    let create_hashtable size init =
    let tbl = Hashtbl.create size in
    List.iter (fun (key, data) -> Hashtbl.add tbl key data) init;
    tbl

    let keyword_table =
        create_hashtable 16 [
            ("true", TRUE);
            ("false", FALSE);
            ("NULL", NULL);
            ("void", VOID);
            ("int", TYPE_INT);
            ("float", TYPE_FLOAT);
            ("char", TYPE_CHAR);
            ("bool", TYPE_BOOL);
            ("return", RETURN);
            ("while", WHILE);
            ("for", FOR);
            ("if", IF);
            ("else", ELSE);
            ("do", DO);
  ]

# 31 "src/scanner.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\214\255\217\255\218\255\219\255\220\255\221\255\222\255\
    \223\255\224\255\225\255\008\000\002\000\002\000\003\000\031\000\
    \033\000\035\000\085\000\067\000\084\000\087\000\085\000\250\255\
    \160\000\162\000\254\255\255\255\235\000\019\000\251\255\228\255\
    \233\255\227\255\232\255\231\255\215\255\216\255\230\255\229\255\
    \243\255\240\255\239\255\238\255\237\255\236\255\121\000\254\255\
    \255\255\101\000\253\255\254\255\097\000\255\255\027\001\250\255\
    \251\255\001\000\254\255\028\001\253\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\029\000\041\000\020\000\014\000\013\000\
    \021\000\011\000\010\000\009\000\008\000\007\000\006\000\255\255\
    \041\000\002\000\255\255\255\255\003\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\001\000\255\255\255\255\255\255\
    \255\255\003\000\255\255\000\000\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\000\000\000\000\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\047\000\000\000\
    \000\000\051\000\000\000\000\000\255\255\000\000\059\000\000\000\
    \000\000\255\255\000\000\059\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\027\000\026\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \027\000\013\000\023\000\060\000\000\000\017\000\011\000\024\000\
    \006\000\005\000\019\000\021\000\003\000\020\000\045\000\018\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\030\000\004\000\015\000\016\000\014\000\043\000\
    \042\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\008\000\041\000\007\000\040\000\022\000\
    \039\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\010\000\012\000\009\000\044\000\036\000\
    \035\000\033\000\031\000\048\000\037\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\052\000\
    \053\000\034\000\038\000\000\000\032\000\000\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \000\000\000\000\000\000\000\000\022\000\000\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \028\000\000\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\000\000\000\000\000\000\000\000\
    \000\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\000\000\000\000\000\000\000\000\029\000\
    \002\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\058\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\056\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\050\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\057\000\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\055\000\255\255";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\057\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\011\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\029\000\000\000\000\000\000\000\000\000\013\000\
    \014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\015\000\000\000\016\000\000\000\
    \017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\012\000\018\000\
    \019\000\020\000\021\000\046\000\018\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\049\000\
    \052\000\020\000\018\000\255\255\021\000\255\255\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \255\255\255\255\255\255\255\255\022\000\255\255\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \025\000\255\255\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\255\255\255\255\255\255\255\255\
    \255\255\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\255\255\255\255\255\255\255\255\024\000\
    \000\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\054\000\059\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\054\000\059\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\049\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\054\000\
    \059\000\046\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\054\000\059\000";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 35 "src/scanner.mll"
                            ( token lexbuf )
# 219 "src/scanner.ml"

  | 1 ->
# 36 "src/scanner.mll"
                            ( Lexing.new_line lexbuf; token lexbuf )
# 224 "src/scanner.ml"

  | 2 ->
let
# 37 "src/scanner.mll"
                i
# 230 "src/scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 37 "src/scanner.mll"
                            ( let num = int_of_string i in INT num)
# 234 "src/scanner.ml"

  | 3 ->
let
# 38 "src/scanner.mll"
                         f
# 240 "src/scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 38 "src/scanner.mll"
                            ( let num = float_of_string f in FLOAT num)
# 244 "src/scanner.ml"

  | 4 ->
let
# 39 "src/scanner.mll"
                          s
# 250 "src/scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 3) in
# 39 "src/scanner.mll"
                            ( let c = String.get s 1 in CHAR c)
# 254 "src/scanner.ml"

  | 5 ->
# 40 "src/scanner.mll"
                            ( STRING( string (Buffer.create 509 )lexbuf) )
# 259 "src/scanner.ml"

  | 6 ->
let
# 41 "src/scanner.mll"
            word
# 265 "src/scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 41 "src/scanner.mll"
                            ( try
                                let token = Hashtbl.find keyword_table word in
                                token
                                with Not_found ->
                                    ID word)
# 273 "src/scanner.ml"

  | 7 ->
# 46 "src/scanner.mll"
                            ( PLUS )
# 278 "src/scanner.ml"

  | 8 ->
# 47 "src/scanner.mll"
                            ( MINUS )
# 283 "src/scanner.ml"

  | 9 ->
# 48 "src/scanner.mll"
                            ( TIMES )
# 288 "src/scanner.ml"

  | 10 ->
# 49 "src/scanner.mll"
                            ( DIV )
# 293 "src/scanner.ml"

  | 11 ->
# 50 "src/scanner.mll"
                            ( MOD )
# 298 "src/scanner.ml"

  | 12 ->
# 51 "src/scanner.mll"
                            ( EQ )
# 303 "src/scanner.ml"

  | 13 ->
# 52 "src/scanner.mll"
                            ( LESS )
# 308 "src/scanner.ml"

  | 14 ->
# 53 "src/scanner.mll"
                            ( GREATER )
# 313 "src/scanner.ml"

  | 15 ->
# 54 "src/scanner.mll"
                            ( LEQ )
# 318 "src/scanner.ml"

  | 16 ->
# 55 "src/scanner.mll"
                            ( GEQ )
# 323 "src/scanner.ml"

  | 17 ->
# 56 "src/scanner.mll"
                            ( NEQ )
# 328 "src/scanner.ml"

  | 18 ->
# 57 "src/scanner.mll"
                            ( OR )
# 333 "src/scanner.ml"

  | 19 ->
# 58 "src/scanner.mll"
                            ( AND )
# 338 "src/scanner.ml"

  | 20 ->
# 59 "src/scanner.mll"
                            ( NOT )
# 343 "src/scanner.ml"

  | 21 ->
# 60 "src/scanner.mll"
                            ( ASS )
# 348 "src/scanner.ml"

  | 22 ->
# 61 "src/scanner.mll"
                            ( PLUSASS )
# 353 "src/scanner.ml"

  | 23 ->
# 62 "src/scanner.mll"
                            ( MINUSASS )
# 358 "src/scanner.ml"

  | 24 ->
# 63 "src/scanner.mll"
                            ( MINUSASS )
# 363 "src/scanner.ml"

  | 25 ->
# 64 "src/scanner.mll"
                            ( DIVASS )
# 368 "src/scanner.ml"

  | 26 ->
# 65 "src/scanner.mll"
                            ( MODASS )
# 373 "src/scanner.ml"

  | 27 ->
# 66 "src/scanner.mll"
                            ( INC )
# 378 "src/scanner.ml"

  | 28 ->
# 67 "src/scanner.mll"
                            ( DEC )
# 383 "src/scanner.ml"

  | 29 ->
# 68 "src/scanner.mll"
                            ( ADDR )
# 388 "src/scanner.ml"

  | 30 ->
# 69 "src/scanner.mll"
                            ( LBRACE )
# 393 "src/scanner.ml"

  | 31 ->
# 70 "src/scanner.mll"
                            ( RBRACE )
# 398 "src/scanner.ml"

  | 32 ->
# 71 "src/scanner.mll"
                            ( LBRACK )
# 403 "src/scanner.ml"

  | 33 ->
# 72 "src/scanner.mll"
                            ( RBRACK )
# 408 "src/scanner.ml"

  | 34 ->
# 73 "src/scanner.mll"
                            ( LPAR )
# 413 "src/scanner.ml"

  | 35 ->
# 74 "src/scanner.mll"
                            ( RPAR )
# 418 "src/scanner.ml"

  | 36 ->
# 75 "src/scanner.mll"
                            ( SEMICOLON )
# 423 "src/scanner.ml"

  | 37 ->
# 76 "src/scanner.mll"
                            ( COMMA )
# 428 "src/scanner.ml"

  | 38 ->
# 77 "src/scanner.mll"
                            ( EOF )
# 433 "src/scanner.ml"

  | 39 ->
# 78 "src/scanner.mll"
                            (line_comment lexbuf)
# 438 "src/scanner.ml"

  | 40 ->
# 79 "src/scanner.mll"
                            ( comment lexbuf)
# 443 "src/scanner.ml"

  | 41 ->
let
# 80 "src/scanner.mll"
           c
# 449 "src/scanner.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 80 "src/scanner.mll"
                            ( Util.raise_lexer_error lexbuf ("Illegal character " ^ Char.escaped c) )
# 453 "src/scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and line_comment lexbuf =
   __ocaml_lex_line_comment_rec lexbuf 46
and __ocaml_lex_line_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 83 "src/scanner.mll"
                            ( Lexing.new_line lexbuf; token lexbuf )
# 465 "src/scanner.ml"

  | 1 ->
# 84 "src/scanner.mll"
                            (line_comment lexbuf)
# 470 "src/scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_line_comment_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 49
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 86 "src/scanner.mll"
                            ( token lexbuf )
# 482 "src/scanner.ml"

  | 1 ->
# 87 "src/scanner.mll"
                            ( comment lexbuf )
# 487 "src/scanner.ml"

  | 2 ->
# 88 "src/scanner.mll"
                            ( Util.raise_lexer_error lexbuf (" Comment not closed") )
# 492 "src/scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and string buf lexbuf =
   __ocaml_lex_string_rec buf lexbuf 54
and __ocaml_lex_string_rec buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 90 "src/scanner.mll"
                           s
# 505 "src/scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 90 "src/scanner.mll"
                                ( Buffer.add_string buf s;
                                    string buf lexbuf )
# 510 "src/scanner.ml"

  | 1 ->
# 92 "src/scanner.mll"
                                ( Buffer.add_char buf '\n';
                                    Lexing.new_line lexbuf;
                                    string buf lexbuf )
# 517 "src/scanner.ml"

  | 2 ->
# 95 "src/scanner.mll"
                                ( Buffer.add_char buf '"'; 
                                    string buf lexbuf )
# 523 "src/scanner.ml"

  | 3 ->
# 97 "src/scanner.mll"
                                ( Buffer.add_char buf '\\';
                                    string buf lexbuf)
# 529 "src/scanner.ml"

  | 4 ->
# 99 "src/scanner.mll"
                                ( Buffer.contents buf )
# 534 "src/scanner.ml"

  | 5 ->
# 100 "src/scanner.mll"
                                ( Util.raise_lexer_error lexbuf ("end of file inside of a string") )
# 539 "src/scanner.ml"

  | 6 ->
let
# 101 "src/scanner.mll"
           c
# 545 "src/scanner.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 101 "src/scanner.mll"
                                ( Util.raise_lexer_error lexbuf ("Illegal character " ^ Char.escaped c))
# 549 "src/scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_string_rec buf lexbuf __ocaml_lex_state

;;

